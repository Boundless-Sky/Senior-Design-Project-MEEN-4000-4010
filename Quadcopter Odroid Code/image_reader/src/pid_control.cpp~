/*things to edit:
!!!!!!!!desired location (edit every time the resolution is changed!!!!!!!!
PID gains
*/

//setup_stuff (libraries)
#include <ros/ros.h>
#include <stdio.h>
#include <dji_sdk/dji_drone.h>
#include <cstdlib>
#include <stdlib.h>
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include "std_msgs/String.h"
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/Vector3.h>
#include <sstream>

/* ----- Global Variables ----- */
// this is where robot position should be, center of the image. 
// currently using: 1024 x 576
// if sampling too low.... too big of picture
double robot_x = 512;
//double robot_y = 288;
double robot_rot = 0;
double dt = .08;
double wx, wy, wz, q0, q1, q2, q3, roll, pitch, yaw;

/* ----- Geometry messages ---- */
geometry_msgs::Vector3 vector;
// geometry_msgs::Quaternion Q;// change this to Quaternion if you want rotation later

//do listen_stuff (subscription to image_total) to get input, dt
//get x, y, rotation, and time 
/*void getCoords(const geometry_msgs::Quaternion& Q){
	robot_x = Q.x;
//	robot_y = Q.y;
	robot_rot = Q.z;
	dt = Q.w;
}
*/

/* ---- Functions ----- */
void getCoords(const geometry_msgs::Vector3& v){
// take code from image_total
	robot_x = v.x;
//	robot_y = v.y;
	dt = v.z;
}

void attitude_callback(const dji_sdk::AttitudeQuaternion& attitude_msg_in) {
  	q0 = attitude_msg_in.q0;
	q1 = attitude_msg_in.q1;
	q2 = attitude_msg_in.q2;
	q3 = attitude_msg_in.q3;
	wx = attitude_msg_in.wx;
	wy = attitude_msg_in.wy;
	wz = attitude_msg_in.wz;
	toEulerianAngle(q0, q1, q2, q3, roll, pitch, yaw);
}

void toEulerianAngle(double& q0,double& q1,double& q2,double& q3, double& roll, double& pitch, double& yaw)
{
	/* The point of to euler angle is because flight controller spits sensor data out as quaternion. A3 flight functions
	   take in euler */
	double ysqr = q2 * q2;

	// roll (x-axis rotation)
	double t0 = +2.0 * (q0 * q1 + q2 * q3);
	double t1 = +1.0 - 2.0 * (q1 * q1 + ysqr);
	roll = std::atan2(t0, t1);

	// pitch (y-axis rotation)
	double t2 = +2.0 * (q0 * q2 - q3 * q1);
	t2 = t2 > 1.0 ? 1.0 : t2;
	t2 = t2 < -1.0 ? -1.0 : t2;
	pitch = std::asin(t2);

	// yaw (z-axis rotation)
	double t3 = +2.0 * (q0 * q3 + q1 * q2);
	double t4 = +1.0 - 2.0 * (ysqr + q3 * q3);  
	yaw = std::atan2(t3, t4);
}

int main(int argc, char **argv){

	//ros setup
	ros::init(argc, argv, "tracker_control");
	ros::NodeHandle nh;

	//setup publisher and subscriber
	ros::Publisher vec_pub = nh.advertise<geometry_msgs::Vector3>("/cmd_att",1); //for vector3 
	//ros::Publisher vec_pub = nh.advertise<geometry_msgs::Quaternion>("/cmd_att",1); //for Quaternion
	ros::Subscriber quat_sub = nh.subscribe("/image_centroid",1,getCoords); //From image_total.cpp
    	ros::Subscriber attitude_sub = nh.subscribe("/dji_sdk/attitude_quaternion", 1, attitude_callback); //Flight Controller Sensors


	ros::Rate loop_rate(12.5);
	//set the desired positions and gains
	double des_x = 512; 		// desired x pixel location
	//double des_y = 288; 		// desired y pixel location
	double kp = -.015; 		// proportional gain
	double ki = -.006;		// integrator term
	double kd = -.00005; 		// derivative term
	double sum_err_x = 0; 	//initialize to 0
	double sum_err_y = 0;  	//initialize to 0
	double prev_err_x = 0;  //initialize to 0
	double prev_err_y = 0;  //initialize to 0
	int loop_count = 0;
	printf("PID control is online\r\n");
	

	while(ros::ok())
	{
		// error in position
		double err_x = -robot_x + des_x;
		//double err_y = -robot_y + des_y;
	
		// sum of errors (used for integral terms)
		//add next increment like euler method
		sum_err_x += err_x*dt;
		//sum_err_y += err_y*dt; // likewise

		// outputs to be published (PID stuff happens here).
		//double flight_roll;
		double flight_pitch;
		if (loop_count != 0){
			flight_pitch = kp*err_x + ki*sum_err_x/loop_count + kd*(err_x - prev_err_x) / dt;
			//flight_roll = kp*err_y + ki*sum_err_y/loop_count + kd*(err_y - prev_err_y) / dt;
		}

		// update errors
		prev_err_x = err_x;
		//prev_err_y = err_y;
		loop_count++;

		//make twist
		//note: in the camera frame, left is increasing x and down is increasing y
		vector.x = flight_pitch;
		vector.y = 0.0;
		vector.z = 0.0; //set to yaw angle eventually

		//do publish_stuff to send output
		vec_pub.publish(vector);
		
		ros::spinOnce();
		loop_rate.sleep();
	}//end While
	
	return 0;
}// end Main
